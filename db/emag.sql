-- phpMyAdmin SQL Dump
-- version 4.6.5.2
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: 24 Mai 2017 la 11:29
-- Versiune server: 10.1.21-MariaDB
-- PHP Version: 5.6.30

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `emag`
--

-- --------------------------------------------------------

--
-- Structura de tabel pentru tabelul `php_elephant_answers`
--

CREATE TABLE `php_elephant_answers` (
  `id` int(11) NOT NULL,
  `question_id` int(11) DEFAULT '0',
  `answer_code` text,
  `timestamp` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Salvarea datelor din tabel `php_elephant_answers`
--

INSERT INTO `php_elephant_answers` (`id`, `question_id`, `answer_code`, `timestamp`) VALUES
(1, 6, 'class PilesHeap extends SplMinHeap\r\n{\r\n    public function compare($pile1, $pile2)\r\n    {\r\n        return parent::compare($pile1->top(), $pile2->top());\r\n    }\r\n}\r\n\r\nfunction patience_sort($n)\r\n{\r\n    $piles = array();\r\n    foreach ($n as $x) {\r\n        $low = 0;\r\n        $high = count($piles) - 1;\r\n        while ($low <= $high) {\r\n            $mid = (int)(($low + $high) / 2);\r\n            if ($piles[$mid]->top() >= $x)\r\n                $high = $mid - 1;\r\n            else\r\n                $low = $mid + 1;\r\n        }\r\n        $i = $low;\r\n        if ($i == count($piles))\r\n            $piles[] = new SplStack();\r\n        $piles[$i]->push($x)\r\n    }\r\n\r\n    $heap = new PilesHeap();\r\n    foreach ($piles as $pile)\r\n        $heap->insert($pile);\r\n    for ($c = 0; $c < count($n); $c++) {\r\n        $smallPile = $heap->extract();\r\n        $n[$c] = $smallPile->pop();\r\n        if (!$smallPile->isEmpty())\r\n            $heap->insert($smallPile);\r\n    }\r\n    assert($heap->isEmpty());\r\n}\r\n\r\n$a = array(100, 54, 7, 2, 5, 4, 1);\r\npatience_sort($a);\r\necho json_encode($a);', '2017-05-22 15:12:47'),
(2, 2, 'function quicksort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $value;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $value;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-22 15:12:54'),
(3, 7, '$float_num = 0.0456;\r\n$exponent_part = (floor(log($float_num, 2)) + 1);\r\n$mantissa_part = ($float_num * pow(2, -$exponent_part));\r\n\r\n$arr = array(\'floating_value\' => $float_num,\r\n    \'exponent_part\' => $exponent_part,\r\n    \'mantissa_part\' => $mantissa_part,\r\n);\r\n\r\necho json_encode($arr); ', '2017-05-22 15:13:25'),
(4, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, $chars);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-22 15:18:06'),
(5, 2, 'function quicksort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $value;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $value;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-22 15:18:12'),
(6, 1, 'function quadraticEcuation($a, $b, $c)\r\n{\r\n    $d = pow($b, 2) - 4 * $a * $c;\r\n    if ($d < 0) {\r\n        return NULL;\r\n    } else if ($d == 0) {\r\n        $result = (-$b / 2 * $a);\r\n        return $result;\r\n    } else {\r\n        $result = array();\r\n        $result[] = (-$b + sqrt($d)) / (2 * $a); \r\n        $result[] = (-$b - sqrt($d)) / (2 * $a);\r\n        return $result;\r\n    }\r\n}\r\n\r\n$x = quadraticEcuation(1, -8, 15);\r\n\r\nif (is_array($x)) {\r\n    echo sprintf(\"x1 = %.2f; x2 = %.2f\", $x[0], $x[1]);\r\n} elseif (!is_null($x)) {\r\n    echo sprintf(\"x1 = x2 = %.2f\", $x);\r\n} else {\r\n    echo \"No real solutions found\";\r\n}\r\n', '2017-05-22 15:23:56'),
(7, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-22 15:24:29'),
(8, 7, '$float_num = 0.0456;\r\n$exponent_part = (floor(log($float_num, 2)) + 1);\r\n$mantissa_part = ($float_num * pow(2, -$exponent_part));\r\n\r\n$arr = array(\'floating_value\' => $float_num,\r\n    \'exponent_part\' => $exponent_part,\r\n    \'mantissa_part\' => $mantissa_part,\r\n);\r\n\r\necho json_encode($arr); ', '2017-05-22 15:24:41'),
(9, 6, 'class PilesHeap extends SplMinHeap\r\n{\r\n    public function compare($pile1, $pile2)\r\n    {\r\n        return parent::compare($pile1->top(), $pile2->top());\r\n    }\r\n}\r\n\r\nfunction patience_sort($n)\r\n{\r\n    $piles = array();\r\n    foreach ($n as $x) {\r\n        $low = 0;\r\n        $high = count($piles) - 1;\r\n        while ($low <= $high) {\r\n            $mid = (int)(($low + $high) / 2);\r\n            if ($piles[$mid]->top() >= $x)\r\n                $high = $mid - 1;\r\n            else\r\n                $low = $mid + 1;\r\n        }\r\n        $i = $low;\r\n        if ($i == count($piles))\r\n            $piles[] = new SplStack();\r\n        $piles[$i]->push($x)\r\n    }\r\n\r\n    $heap = new PilesHeap();\r\n    foreach ($piles as $pile)\r\n        $heap->insert($pile);\r\n    for ($c = 0; $c < count($n); $c++) {\r\n        $smallPile = $heap->extract();\r\n        $n[$c] = $smallPile->pop();\r\n        if (!$smallPile->isEmpty())\r\n            $heap->insert($smallPile);\r\n    }\r\n    assert($heap->isEmpty());\r\n}\r\n\r\n$a = array(100, 54, 7, 2, 5, 4, 1);\r\npatience_sort($a);\r\necho json_encode($a);', '2017-05-22 15:24:50'),
(10, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, (int)$data);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-22 16:10:35'),
(11, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, $chars);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-22 16:11:47'),
(12, 2, 'function quicksort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $value;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $value;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quicksort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-22 16:13:01'),
(13, 2, 'function quicksort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $value;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $value;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quicksort($loe), array($pivot_key => $pivot), quicksort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-22 16:13:15'),
(14, 2, 'function quick_sort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $value;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $value;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-22 16:13:36'),
(15, 2, 'function quick_sort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $val;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $val;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-22 16:15:26'),
(16, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-22 17:25:42'),
(17, 6, 'class PilesHeap extends SplMinHeap\r\n{\r\n    public function compare($pile1, $pile2)\r\n    {\r\n        return parent::compare($pile1->top(), $pile2->top());\r\n    }\r\n}\r\n\r\nfunction patience_sort($n)\r\n{\r\n    $piles = array();\r\n    foreach ($n as $x) {\r\n        $low = 0;\r\n        $high = count($piles) - 1;\r\n        while ($low <= $high) {\r\n            $mid = (int)(($low + $high) / 2);\r\n            if ($piles[$mid]->top() >= $x)\r\n                $high = $mid - 1;\r\n            else\r\n                $low = $mid + 1;\r\n        }\r\n        $i = $low;\r\n        if ($i == count($piles))\r\n            $piles[] = new SplStack();\r\n        $piles[$i]->push($x)\r\n    }\r\n\r\n    $heap = new PilesHeap();\r\n    foreach ($piles as $pile)\r\n        $heap->insert($pile);\r\n    for ($c = 0; $c < count($n); $c++) {\r\n        $smallPile = $heap->extract();\r\n        $n[$c] = $smallPile->pop();\r\n        if (!$smallPile->isEmpty())\r\n            $heap->insert($smallPile);\r\n    }\r\n    assert($heap->isEmpty());\r\n}\r\n\r\n$a = array(100, 54, 7, 2, 5, 4, 1);\r\npatience_sort($a);\r\necho json_encode($a);', '2017-05-22 17:25:59'),
(18, 1, 'function quadraticEcuation($a, $b, $c)\r\n{\r\n    $d = pow($b, 2) - 4 * $a * $c;\r\n    if ($d < 0) {\r\n        return NULL;\r\n    } else if ($d == 0) {\r\n        $result = (-$b / 2 * $a);\r\n        return $result;\r\n    } else {\r\n        $result = array();\r\n        $result[] = (-$b + sqrt($d)) / (2 * $a); \r\n        $result[] = (-$b - sqrt($d)) / (2 * $a);\r\n        return $result;\r\n    }\r\n}\r\n\r\n$x = quadraticEcuation(1, -8, 15);\r\n\r\nif (is_array($x)) {\r\n    echo sprintf(\"x1 = %.2f; x2 = %.2f\", $x[0], $x[1]);\r\n} elseif (!is_null($x)) {\r\n    echo sprintf(\"x1 = x2 = %.2f\", $x);\r\n} else {\r\n    echo \"No real solutions found\";\r\n}\r\n', '2017-05-22 17:26:09'),
(19, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, ($chars);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-22 18:55:11'),
(20, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-22 18:55:26'),
(21, 3, '$checkIfPrime = 47;\r\n\r\nfunction IsPrime($n)\r\n{\r\n    for ($x = 2; $x <= sqrt($n); $x++) {\r\n        if ($n % $x == 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n$a = IsPrime($checkIfPrime);\r\nif ($a == 0) {\r\n    echo $checkIfPrime. \' is not a Prime Number\';\r\n}\r\nelse {\r\n    echo $checkIfPrime. \' is a Prime Number\';\r\n}', '2017-05-22 18:55:48'),
(22, 1, 'function quadraticEcuation($a, $b, $c)\r\n{\r\n    $d = pow($b, 2) - 4 * $a * $c;\r\n    if ($d < 0) {\r\n        return NULL;\r\n    } else if ($d == 0) {\r\n        $result = (-$b / 2 * $a);\r\n        return $result;\r\n    } else {\r\n        $result = array();\r\n        $result[] = (-$b + sqrt($d)) / (2 * $a); \r\n        $result[] = (-$b - sqrt($d)) / (2 * $a);\r\n        return $result;\r\n    }\r\n}\r\n\r\n$x = quadraticEcuation(1, -8, 15);\r\n\r\nif (is_array($x)) {\r\n    echo sprintf(\"x1 = %.2f; x2 = %.2f\", $x[0], $x[1]);\r\n} elseif (!is_null($x)) {\r\n    echo sprintf(\"x1 = x2 = %.2f\", $x);\r\n} else {\r\n    echo \"No real solutions found\";\r\n}\r\n', '2017-05-22 20:54:17'),
(23, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-22 20:54:22'),
(24, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-23 11:32:32'),
(25, 2, 'function quicksort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $val;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $val;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-23 11:33:47'),
(26, 2, 'function quick_sort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $val;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $val;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-23 11:34:20'),
(27, 6, 'class PilesHeap extends SplMinHeap\r\n{\r\n    public function compare($pile1, $pile2)\r\n    {\r\n        return parent::compare($pile1->top(), $pile2->top());\r\n    }\r\n}\r\n\r\nfunction patience_sort($n)\r\n{\r\n    $piles = array();\r\n    foreach ($n as $x) {\r\n        $low = 0;\r\n        $high = count($piles) - 1;\r\n        while ($low <= $high) {\r\n            $mid = (int)(($low + $high) / 2);\r\n            if ($piles[$mid]->top() >= $x)\r\n                $high = $mid - 1;\r\n            else\r\n                $low = $mid + 1;\r\n        }\r\n        $i = $low;\r\n        if ($i == count($piles))\r\n            $piles[] = new SplStack();\r\n        $piles[$i]->push($x)\r\n    }\r\n\r\n    $heap = new PilesHeap();\r\n    foreach ($piles as $pile)\r\n        $heap->insert($pile);\r\n    for ($c = 0; $c < count($n); $c++) {\r\n        $smallPile = $heap->extract();\r\n        $n[$c] = $smallPile->pop();\r\n        if (!$smallPile->isEmpty())\r\n            $heap->insert($smallPile);\r\n    }\r\n    assert($heap->isEmpty());\r\n}\r\n\r\n$a = array(100, 54, 7, 2, 5, 4, 1);\r\npatience_sort($a);\r\necho json_encode($a);', '2017-05-23 15:12:39'),
(28, 1, 'function quadraticEcuation($a, $b, $c)\r\n{\r\n    $d = pow($b, 2) - 4 * $a * $c;\r\n    if ($d < 0) {\r\n        return NULL;\r\n    } else if ($d == 0) {\r\n        $result = (-$b / 2 * $a);\r\n        return $result;\r\n    } else {\r\n        $result = array();\r\n        $result[] = (-$b + sqrt($d)) / (2 * $a); \r\n        $result[] = (-$b - sqrt($d)) / (2 * $a);\r\n        return $result;\r\n    }\r\n}\r\n\r\n$x = quadraticEcuation(1, -8, 15);\r\n\r\nif (is_array($x)) {\r\n    echo sprintf(\"x1 = %.2f; x2 = %.2f\", $x[0], $x[1]);\r\n} elseif (!is_null($x)) {\r\n    echo sprintf(\"x1 = x2 = %.2f\", $x);\r\n} else {\r\n    echo \"No real solutions found\";\r\n}\r\n', '2017-05-23 15:48:22'),
(29, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-23 15:49:17'),
(30, 7, '$float_num = 0.0456;\r\n$exponent_part = (floor(log($float_num, 2)) + 1);\r\n$mantissa_part = ($float_num * pow(2, -$exponent_part));\r\n\r\n$arr = array(\'floating_value\' => $float_num,\r\n    \'exponent_part\' => $exponent_part,\r\n    \'mantissa_part\' => $mantissa_part,\r\n);\r\n\r\necho json_encode($arr); ', '2017-05-23 15:49:34'),
(31, 3, '$checkIfPrime = 47;\r\n\r\nfunction IsPrime($n)\r\n{\r\n    for ($x = 2; $x <= sqrt($n); $x++) {\r\n        if ($n % $x == 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n$a = IsPrime($checkIfPrime);\r\nif ($a == 0) {\r\n    echo $checkIfPrime. \' is not a Prime Number\';\r\n}\r\nelse {\r\n    echo $checkIfPrime. \' is a Prime Number\';\r\n}', '2017-05-23 15:49:52'),
(32, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, ($chars);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-23 15:50:06'),
(33, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, ($chars);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-23 15:50:20'),
(34, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, $chars;\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-23 15:50:41'),
(35, 2, 'function quick_sort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $val;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $val;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-23 15:50:56'),
(36, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-23 15:51:16'),
(37, 6, 'class PilesHeap extends SplMinHeap\r\n{\r\n    public function compare($pile1, $pile2, $pile3)\r\n    {\r\n        return parent::compare($pile1->top(), $pile2->top());\r\n    }\r\n}\r\n\r\nfunction patience_sort($n)\r\n{\r\n    $piles = array();\r\n    foreach ($n as $x) {\r\n        $low = 0;\r\n        $high = count($piles) - 1;\r\n        while ($low <= $high) {\r\n            $mid = (int)(($low + $high) / 2);\r\n            if ($piles[$mid]->top() >= $x)\r\n                $high = $mid - 1;\r\n            else\r\n                $low = $mid + 1;\r\n        }\r\n        $i = $low;\r\n        if ($i == count($piles))\r\n            $piles[] = new SplStack();\r\n        $piles[$i]->push($x)\r\n    }\r\n\r\n    $heap = new PilesHeap();\r\n    foreach ($piles as $pile)\r\n        $heap->insert($pile);\r\n    for ($c = 0; $c < count($n); $c++) {\r\n        $smallPile = $heap->extract();\r\n        $n[$c] = $smallPile->pop();\r\n        if (!$smallPile->isEmpty())\r\n            $heap->insert($smallPile);\r\n    }\r\n    assert($heap->isEmpty());\r\n}\r\n\r\n$a = array(100, 54, 7, 2, 5, 4, 1);\r\npatience_sort($a);\r\necho json_encode($a);', '2017-05-23 16:07:27'),
(38, 3, '$checkIfPrime = 47;\r\n\r\nfunction IsPrime($n)\r\n{\r\n    for ($x = 2; $x <= sqrt($n); $x++) {\r\n        if ($n % $x == 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n$a = IsPrime($checkIfPrime);\r\nif ($a == 0) {\r\n    echo $checkIfPrime. \' is not a Prime Number\';\r\n}\r\nelse {\r\n    echo $checkIfPrime. \' is a Prime Number\';\r\n}', '2017-05-23 16:22:10'),
(39, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, ($chars);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-23 16:22:32'),
(40, 2, 'function quicksort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $value;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $value;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-24 11:03:09'),
(41, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, (int)$data);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-24 11:06:53'),
(42, 1, 'function quadraticEcuation($a, $b)\r\n{\r\n    $d = pow($b, 2) - 4 * $a * $c;\r\n    if ($d < 0) {\r\n        return NULL;\r\n    } else if ($d == 0) {\r\n        $result = (-$b / 2 * $a);\r\n        return $result;\r\n    } else {\r\n        $result = array();\r\n        $result[] = (-$b + sqrt($d)) / (2 * $a); \r\n        $result[] = (-$b - sqrt($d)) / (2 * $a);\r\n        return $result;\r\n    }\r\n}\r\n\r\n$x = quadraticEcuation(1, -8, 15);\r\n\r\nif (is_array($x)) {\r\n    echo sprintf(\"x1 = %.2f; x2 = %.2f\", $x[0], $x[1]);\r\n} elseif (!is_null($x)) {\r\n    echo sprintf(\"x1 = x2 = %.2f\", $x);\r\n} else {\r\n    echo \"No real solutions found\";\r\n}\r\n', '2017-05-24 11:09:15'),
(43, 6, 'class PilesHeap extends SplMinHeap\r\n{\r\n    public function compare($pile1, $pile2)\r\n    {\r\n        return parent::compare($pile1->top(), $pile2->top());\r\n    }\r\n}\r\n\r\nfunction patience_sort($n)\r\n{\r\n    $piles = array();\r\n    foreach ($n as $x) {\r\n        $low = 0;\r\n        $high = count($piles) - 1;\r\n        while ($low <= $high) {\r\n            $mid = (int)(($low + $high) / 2);\r\n            if ($piles[$mid]->top() >= $x)\r\n                $high = $mid - 1;\r\n            else\r\n                $low = $mid + 1;\r\n        }\r\n        $i = $low;\r\n        if ($i == count($piles))\r\n            $piles[] = new SplStack();\r\n        $piles[$i]->push($x)\r\n    }\r\n\r\n    $heap = new PilesHeap();\r\n    foreach ($piles as $pile)\r\n        $heap->insert($pile);\r\n    for ($c = 0; $c < count($n); $c++) {\r\n        $smallPile = $heap->extract();\r\n        $n[$c] = $smallPile->pop();\r\n        if (!$smallPile->isEmpty())\r\n            $heap->insert($smallPile);\r\n    }\r\n    assert($heap->isEmpty());\r\n}\r\n\r\n$a = array(100, 54, 7, 2, 5, 4, 1);\r\npatience_sort($a);\r\necho json_encode($a);', '2017-05-24 11:09:38'),
(44, 7, '$float_num = 0.0456;\r\n$exponent_part = (floor(log($float_num, 2)) + 1);\r\n$mantissa_part = ($floatnum * pow(2, -$exponent_part));\r\n\r\n$arr = array(\'floating_value\' => $float_num,\r\n    \'exponent_part\' => $exponent_part,\r\n    \'mantissa_part\' => $mantissa_part,\r\n);\r\n\r\necho jsonencode($arr); ', '2017-05-24 11:09:56'),
(45, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-24 11:10:10'),
(46, 2, 'function quicksort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $value;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $value;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', '2017-05-24 11:10:50'),
(47, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, (int)$data);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-24 11:11:03'),
(48, 1, 'function quadraticEcuation($a, $b)\r\n{\r\n    $d = pow($b, 2) - 4 * $a * $c;\r\n    if ($d < 0) {\r\n        return NULL;\r\n    } else if ($d == 0) {\r\n        $result = (-$b / 2 * $a);\r\n        return $result;\r\n    } else {\r\n        $result = array();\r\n        $result[] = (-$b + sqrt($d)) / (2 * $a); \r\n        $result[] = (-$b - sqrt($d)) / (2 * $a);\r\n        return $result;\r\n    }\r\n}\r\n\r\n$x = quadraticEcuation(1, -8, 15);\r\n\r\nif (is_array($x)) {\r\n    echo sprintf(\"x1 = %.2f; x2 = %.2f\", $x[0], $x[1]);\r\n} elseif (!is_null($x)) {\r\n    echo sprintf(\"x1 = x2 = %.2f\", $x);\r\n} else {\r\n    echo \"No real solutions found\";\r\n}\r\n', '2017-05-24 11:11:18'),
(49, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-24 12:28:12'),
(50, 5, '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '2017-05-24 12:28:16'),
(51, 4, 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, (int)$data);\r\n}\r\n\r\necho strlen(password_generate(7));', '2017-05-24 12:28:23'),
(52, 7, '$float_num = 0.0456;\r\n$exponent_part = (floor(log($float_num, 2)) + 1);\r\n$mantissa_part = ($floatnum * pow(2, -$exponent_part));\r\n\r\n$arr = array(\'floating_value\' => $float_num,\r\n    \'exponent_part\' => $exponent_part,\r\n    \'mantissa_part\' => $mantissa_part,\r\n);\r\n\r\necho jsonencode($arr); ', '2017-05-24 12:28:28');

-- --------------------------------------------------------

--
-- Structura de tabel pentru tabelul `php_elephant_questions`
--

CREATE TABLE `php_elephant_questions` (
  `id` int(11) NOT NULL,
  `question` text NOT NULL,
  `code` text NOT NULL,
  `answer_return` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Salvarea datelor din tabel `php_elephant_questions`
--

INSERT INTO `php_elephant_questions` (`id`, `question`, `code`, `answer_return`) VALUES
(1, '<h2>Quadratic Ecuation</h2>\r\n<p>On the right side of screen you can find the php code that resolve an quadratic ecuation.</p>\r\n<p><em>eg. x<sup>2</sup>-8x+15=0</em></p>\r\n<p>Anyway, there is a small bug in the code. Please find it and fix the code so it can resolve the  quadratic ecuation.</p>        \r\n\r\n', 'function quadraticEcuation($a, $b)\r\n{\r\n    $d = pow($b, 2) - 4 * $a * $c;\r\n    if ($d < 0) {\r\n        return NULL;\r\n    } else if ($d == 0) {\r\n        $result = (-$b / 2 * $a);\r\n        return $result;\r\n    } else {\r\n        $result = array();\r\n        $result[] = (-$b + sqrt($d)) / (2 * $a); \r\n        $result[] = (-$b - sqrt($d)) / (2 * $a);\r\n        return $result;\r\n    }\r\n}\r\n\r\n$x = quadraticEcuation(1, -8, 15);\r\n\r\nif (is_array($x)) {\r\n    echo sprintf(\"x1 = %.2f; x2 = %.2f\", $x[0], $x[1]);\r\n} elseif (!is_null($x)) {\r\n    echo sprintf(\"x1 = x2 = %.2f\", $x);\r\n} else {\r\n    echo \"No real solutions found\";\r\n}\r\n', 'x1 = 5.00; x2 = 3.00'),
(2, '<h2>Write a PHP program to sort a list of elements using Quick sort</h2>\r\n<p>Quick sort is a comparison sort, meaning that it can sort items of any type for which a \"less-than\" relation (formally, a total order) is defined.</p>\r\n<p>Elephpant wrote this code but it has some errors in. Please find and fix them and make elephpant happy again.</p>\r\n', 'function quicksort($my_array)\r\n{\r\n    $loe = $gt = array();\r\n    if (count($my_array) < 2) {\r\n        return $my_array;\r\n    }\r\n    \r\n    $pivot_key = key($my_array);\r\n    $pivot = array_shift($my_array);\r\n    \r\n    foreach ($my_array as $val) {\r\n        if ($val <= $pivot) {\r\n            $loe[] = $value;\r\n        } elseif ($val > $pivot) {\r\n            $gt[] = $value;\r\n        }\r\n    }\r\n    \r\n    return array_merge(quick_sort($loe), array($pivot_key => $pivot), quick_sort($gt));\r\n}\r\n\r\n$my_array = array(3, 0, 2, 5, -1, 4, 1);\r\n\r\n$my_array = quick_sort($my_array);\r\n\r\necho \'Sorted Array : \' . implode(\',\', $my_array);', 'Sorted Array : -1,0,1,2,3,4,5'),
(3, '<h2>Write a function to check a number is prime or not</h2>\r\n<p>Note: A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.</p>\r\n<p>Please find the bug and fix it so the code will produce a text that says \"47 is a Prime Number\".</p>\r\n', '$checkIfPrime = 47;\r\n\r\nfunction IsPrime($n)\r\n{\r\n    for ($x = 2; $x <= sqrt($n); $x++) {\r\n        if ($n % $x == 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n$a = IsPrime($checkIfPrime);\r\nif ($a == 0) {\r\n    echo $checkIfPrime. \' is not a Prime Number\';\r\n}\r\nelse {\r\n    echo $checkIfPrime. \' is a Prime Number\';\r\n}', '47 is a Prime Number'),
(4, '<h2>Write a PHP script to generate simple random password</h2>\r\n<p>Do not use rand() function from a given string.</p> \r\n<p>Sample string: <em>1234567890<br>ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>abcefghijklmnopqrstuvwxyz</em></p> \r\n<p><em>Note: Password length may be 11 characters.</em></p>\r\n<p>The elephpant wrote a code but seems that he\'s very beginer and it produce some errors.</p> \r\n<p>Anyway, his ideea is quite good. Please find the error and fix it so the random password generated will have 7 charactes.</p>', 'function password_generate($chars) \r\n{\r\n  $data = \'1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz\';\r\n  return substr(str_shuffle($data), 0, (int)$data);\r\n}\r\n\r\necho strlen(password_generate(7));', '7'),
(5, '<h2>Write a PHP program to sort a list of elements using Strand sort</h2>\r\n<p>This is a way of sorting numbers by extracting shorter sequences of already sorted numbers from an unsorted list.</p>\r\n<p>There are few errors on code syntax, the elephpant was very tired when he wrote this code.</p>\r\n<p>Please be kind and find the syntax errors then fix them fix them in order the sorting functions will work again.</p>\r\n', '$lst = new SplDoublyLinkedList();\r\nforeach (array(100, 0, 2, 5, -1, 4, 1) as $v)\r\n    $lst->push($v);\r\n$newArray = array();\r\nforeach (strandSort($lst) as $v)\r\n    $newArray[] = $v;\r\n\r\necho implode($newArray, \',\');\r\n\r\n\r\nfunction strandSort(SplDoublyLinkedList $lst)\r\n{\r\n    $result = new SplDoublyLinkedList();\r\n    while (!$lst->isEmpty()) {\r\n        $sorted = new SplDoublyLinkedList();\r\n        $remain = new SplDoublyLinkedList();\r\n        $sorted->push($lst->shift());\r\n        foreach ($lst as $item) {\r\n            if ($sorted->top() <= $item) {\r\n                $sorted->push($item);\r\n            } else {\r\n                $remain->push($item);\r\n            }\r\n        }\r\n        $result = _merge($sorted, $result);\r\n        $lst = $remain;\r\n    }\r\n    return $result;\r\n}  \r\n  \r\nfunction _merge(SplDoublyLinkedList left, SplDoublyLinkedList right)\r\n{\r\n    $res = new SplDoublyLinkedList();\r\n    while (!$left->isEmpty() && !$right->isEmpty()) {\r\n        if ($left->bottom() <= $right->bottom()) \r\n            $res->push($left->shift())\r\n        } else {\r\n            $res->push($right->shift());\r\n        }\r\n    }\r\n    foreach ($left as $v) $res->push($v);\r\n    foreach ($right as $v) $res->push($v);\r\n    return $res;\r\n}  ', '-1,0,1,2,4,5,100'),
(6, '<h2>Write a PHP program to sort a list of elements using Patience sort</h2>\r\n<p>Patience sorting is a sorting algorithm inspired by and named after, the card game patience.</p>\r\n<p>A variant of the algorithm efficiently computes the length of a longest increasing subsequence in a given array.</p>\r\n<p>Find errors and fix them. The sort algorithm shall produce this output: [100,54,7,2,5,4,1].</p>', 'class PilesHeap extends SplMinHeap\r\n{\r\n    public function compare($pile1, $pile2)\r\n    {\r\n        return parent::compare($pile1->top(), $pile2->top());\r\n    }\r\n}\r\n\r\nfunction patience_sort($n)\r\n{\r\n    $piles = array();\r\n    foreach ($n as $x) {\r\n        $low = 0;\r\n        $high = count($piles) - 1;\r\n        while ($low <= $high) {\r\n            $mid = (int)(($low + $high) / 2);\r\n            if ($piles[$mid]->top() >= $x)\r\n                $high = $mid - 1;\r\n            else\r\n                $low = $mid + 1;\r\n        }\r\n        $i = $low;\r\n        if ($i == count($piles))\r\n            $piles[] = new SplStack();\r\n        $piles[$i]->push($x)\r\n    }\r\n\r\n    $heap = new PilesHeap();\r\n    foreach ($piles as $pile)\r\n        $heap->insert($pile);\r\n    for ($c = 0; $c < count($n); $c++) {\r\n        $smallPile = $heap->extract();\r\n        $n[$c] = $smallPile->pop();\r\n        if (!$smallPile->isEmpty())\r\n            $heap->insert($smallPile);\r\n    }\r\n    assert($heap->isEmpty());\r\n}\r\n\r\n$a = array(100, 54, 7, 2, 5, 4, 1);\r\npatience_sort($a);\r\necho json_encode($a);', '[100,54,7,2,5,4,1]'),
(7, '<h2>Write a PHP script to extract mantissa and exponent from a floating point value</h2>\r\n<p>Take a look at the code from the right side. It has some erros in it and you need to find and fix them!</p>\r\n', '$float_num = 0.0456;\r\n$exponent_part = (floor(log($float_num, 2)) + 1);\r\n$mantissa_part = ($floatnum * pow(2, -$exponent_part));\r\n\r\n$arr = array(\'floating_value\' => $float_num,\r\n    \'exponent_part\' => $exponent_part,\r\n    \'mantissa_part\' => $mantissa_part,\r\n);\r\n\r\necho jsonencode($arr); ', '{\"floating_value\":0.0456,\"exponent_part\":-4,\"mantissa_part\":0.7296}');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `php_elephant_answers`
--
ALTER TABLE `php_elephant_answers`
  ADD KEY `id` (`id`);

--
-- Indexes for table `php_elephant_questions`
--
ALTER TABLE `php_elephant_questions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `id` (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `php_elephant_answers`
--
ALTER TABLE `php_elephant_answers`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=53;
--
-- AUTO_INCREMENT for table `php_elephant_questions`
--
ALTER TABLE `php_elephant_questions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
